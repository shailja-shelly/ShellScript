1)docker version
 Gives the details of docker client and server(docker engine) and its version details
 
2)docker info
 Gives the details of docker (container , version and all) . gives most of the configuration details out of the engine
 
3) docker command options :
  old way 
		  docker <command> options
		  e.g - docker run
		  docker <command> <sub-command> options
		  e.g - docker container run
		  
4)For running docker container

  docker container run --detach --publish  80:80 --name webhost nginx
  When this command run , docker-engine looks for a nginx image from the image cache , if dont find any image there , it will download the image from
  default remote repository repositories (docker-hub) and stores in the image cache and craeting one container by executing the command which is specified
  in the 'CMD' section in the dockerfile . and publish the conatiner on the 80 port on the local machine ( --publish 80:80 or -p 80:80 )
  detach --> detach option is used to run the container in background and print the the container id in stdout
  --env or -e is used to  declare the environment variable

5) docker container ls / docker ps
   shows the running container

6) docker container ls -a / docker ps -a
   shows the running as well as exited container

7) docker container logs <container-name>
   It will show the logs for a specified container

   
8) docker container --help ( to get the all options for docker container command)

9) docker container rm <container-id>
   It will remove all stopped/exited container,
   For forefully remove the running docker container command would be
   docker rm -f <container-id>
   
10) docker top <container-name>
   listing out the process running inside a specific container
   
11) container is just a process running on localmachine

12) docker container inspect
    details of one container config
	it will resturn a json to see the details of how the container started

13)docker container stats
   performance statistics for all containers
   
14)docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql
   creation of mysql container with generation of random root password

14)docker container run --rm -it --name ubuntu bash
   It will automaticlly remove the conatiner after exit from the container , no need to clean it
   
15)docker container top mysql
   listing out the processes running inside mysql container
   To see the processes running inside the container
   
16)docker container stats
   performance stats for all containers

   
   
####################################   
---Docker Network Defaults
1) Each container connected to a private virtual network "bridge"
2) Each virtual network routes through NAT firewall on host IP 
3) All containers on a virtual network can talk to each other without -p
4) Best practices would be creation of new virtual network for each app
   Like :
    > network "my_web_app" for php and mysql containers
	> network "my_api" for nodejs and mongo container
####################################

17)docker container port <continer-id>
   To see the port exposed for a particular container
  It shows the port mapping means , which port of localhost is forwarding traffic to which port of container
  
18)docker container inspect --format '{{ .NetworkSettings.IPAddress }}' <container-name>
  It will show the IP of the container
  
18)docker network ls
  listing the docker networks(networkid, name, driver, scope)
  
19)docker network inspect bridge
  It shows the container attached to bridge network

20) host networking
 It will avoid the container to connect to the virtual network and it will connect the docker to the localhost interface

21)docker network create my_app_net
  It will create new network my_app_net on the driver bridge(default driver is bridge)
  Need to specify driver name by specifying the option --driver , if you dont want to use default bridge network

22)docker container run -d --name new-nginx --network my_app_net nginx 
create a docker container from a created network (my_app_net) , now run 
docker network inspect my_app_net 
to see the container , its allocated ip and container configuration details

23)docker container connect <network-id> <container-id>
  To attach a container in a existing network
  
24)docker container disconnect <network-id> <container-id>
 To disconnect a container from a network
 
so . it is better to always create new network(docker network create my_app_net) , if your container requiress inter communication , 
rather than using --link option to bridge network 

need to check practically 
> create a network 
> attach two new containers into it
> docker exec -it <first_container> bash ping <second_container>

Images :

	> images are the excutables which is required to create a container .
	> It contains the application binaries , libraries and modules .

	
25) for pushing images to docker registry (ofiicial or private )
   Authentication is stored in .docker/config.json file
26) docker login (looging into dockerhub using docker cli )
27) docker image push <image_name>:tag
28) I can make the repository as private while creating repository , in that case code will not be publish as public

Docker volumes :
The main purpose of docker volume is to store persistent data . or if container goes down .it can restore it comportatnt details , db details , configuration 
details using docker volume .
Docker volume basically maps the filesystem from docker UFS to localmachine filesystem 
It is done by docker -v option 
 
 
29) To see the list of all volumes
$) docker volume ls -a

30) To remove the volumes , that are not being used by any container
$) docker prune <volume_id>

31) volumes is creted by default if it is written in Docker file , volume is saved in the local like below path:
     /var/lib/docker/volumes/<volume_id>
  volumes can be shown from the command 
  $) docker volume ls ( It will give the output like below :)
     DRIVER              VOLUME NAME
	 local               97da673bd057fe5fe21a0413ae100537575e6f0056287719372f3eb7ce7d2f41
	 

32) If you want to create a named volume , the run the docker container command in below format , while you creating a container 
   $) docker run -d --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql_db:/var/lib/mysql mysql
     DRIVER              VOLUME NAME
	  local               97da673bd057fe5fe21a0413ae100537575e6f0056287719372f3eb7ce7d2f41
	  local               mysql_db
33) To create docker volume
   $) docker volume create
   
34) Bind Mounting
  Bind Mounting is used for maps a host file or directory to a container host file or directory
   docker run -v <host-machine-path>:<container-path>
   
---Docker compose
  docker compose is used to crete multi container docker projects , It uses one configuration file docker-compose.yml and one docker-compose cli tools 
  e.g:  Below is the sample docker-compose.yml file
#####################docker-compose.yml############
  
version: 2
services:
   drupal:
     image: drupal
     ports:
      - "8082:80"
     volumes:
      - drupal-modules:/var/www/html
   postgres:
      image: postgres
      environment:
        - POSTGRES_PASSWORD=mypasswd
##################################################
commnad for creating multi containers from docker-compose is
$) docker-compose up -d
  It will use default docker-compose.yml  .
If the yml file named as other name like docker-compose-abc.yml , then for running the containers command would be 
$) docker-compose -f docker-compose-abc.yml up -d

$)docker-compose down
This command is for stopping and removing the docker conatiners , which are created by docker-compose

$)docker-compose down -v 
Here -v is for delete the volume as well as , which is declared in the volume section of docker-compose file

**)docker-compose file for creating custom image and container as well
(It will create the image (nginx-custom) from the context current path using the nginx.Dockerfile )
#############
version: 2
services:
  proxy:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    image: nginx-custom
    ports:
      - '80:80'
   web:
    image: httpd
    volumes:
      - /html:/usr/local/apache2/htdocs 
	 
##############
If you want to build the image from default docker-compose.yml , then the docker-compose file will be look like below:

#########

version: 2
services:
  proxy:
    build: .
    image: nginx-custom
    ports:
      - '80:80'
   web:
    image: httpd
    volumes:
      - /html:/usr/local/apache2/htdocs 
	  
################
nginx details 

nginx is a web server , it can be used as reverse proxy / proxy server , http cache , load balancing etc.
sample nginx configuration file:
###################
server{
  listen 80;
  server_name ~^[0-9]
  
  access_log /var/log/nginx/access.log logstash;
  proxy_set_header Host $host
  proxy_set_header X-Real-IP $remote_addr
  proxy_set_header X-Forwarded-For $remote_addr
  proxy_set_header X-Forwarded-Proto $scheme
  client_max_body_size 100m
  location / {
   root /usr/share/nginx/html;
   index index.html index.htm
   
  }
  location /jenkins {
   proxy_pass http://jenkins:8080
   proxy_set_header Host $host
  }
  location /gerrit {
   proxy_pass http://gerrit:8080
  }
}


   